name: 'Upload Glue script to S3'
on:
  workflow_dispatch:

  push:
    branches:
      - 'prod'
      - 'stage'
      - 'test'
      - 'develop'
    paths:
      - 'src/**'
      - 'tests/**'
      - '**.yml'
      - '!.github/workflows/terraform**'
      
jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout1
        uses: actions/checkout@v2

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Create wheel file
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          python setup.py bdist_wheel

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: wheel_file
          path: dist

  deploy:
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        region: [ us-east-1 ]

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - uses: rlespinasse/github-slug-action@v2.x

      - name: Set Github Branch Source
        run: |
          if [[ "${{ github.event.pull_request.base.ref }}" == "" ]] ; then
            echo "GITHUB_BRANCH=$GITHUB_REF_SLUG" >> $GITHUB_ENV
          else
            echo "GITHUB_BRANCH=$GITHUB_BASE_REF_SLUG" >> $GITHUB_ENV
          fi

      - name: Parse Repo/Branch Vars
        run: |
          export REPO_REGEX='^bardavon-health-(.+?)-(.+?)-(.+?)(-security)?$'
          echo "REPO_PROVIDER=`echo $GITHUB_REPOSITORY_SLUG | perl -pe 's/$ENV{'REPO_REGEX'}/$1/g'`" >> $GITHUB_ENV
          echo "REPO_COMPANY=`echo $GITHUB_REPOSITORY_SLUG | perl -pe 's/$ENV{'REPO_REGEX'}/$2/g'`" >> $GITHUB_ENV
          echo "REPO_APP=`echo $GITHUB_REPOSITORY_SLUG | perl -pe 's/$ENV{'REPO_REGEX'}/$3/g'`" >> $GITHUB_ENV
          echo "REPO_SUFFIX=`echo $GITHUB_REPOSITORY_SLUG | perl -pe 's/$ENV{'REPO_REGEX'}/$4/g'`" >> $GITHUB_ENV
          export BRANCH_REGEX='^(lab-|.*sandbox-)?(.+?)(-iam)?$'
          echo "BRANCH_PREFIX=`echo $GITHUB_BRANCH | perl -pe 's/$ENV{'BRANCH_REGEX'}/\U$1/g'`" >> $GITHUB_ENV
          echo "BRANCH_ENV=`echo $GITHUB_BRANCH | perl -pe 's/$ENV{'BRANCH_REGEX'}/$2/g; s/develop/dev/g'`" >> $GITHUB_ENV
          echo "BRANCH_NAME=`echo $GITHUB_BRANCH | perl -pe 's/$ENV{'BRANCH_REGEX'}/$2$3/g'`" >> $GITHUB_ENV

      - name: Test Parse Repo/Branch Vars
        run: |
          if [ -z "$REPO_PROVIDER" -o \
               -z "$REPO_COMPANY" -o \
               -z "$REPO_APP" -o \
               -z "$BRANCH_ENV" -o \
               -z "$BRANCH_NAME" ] ; then
            echo 'Failed to Parse Repo/Branch Vars!' ; exit 1
          fi

      - name: Get Accesss Key Prefix
        run: |
          if [[ "$REPO_SUFFIX" == "-security" ]] ; then
            echo 'ACCESS_KEY_PREFIX=IAM_' >> $GITHUB_ENV
          else
            echo 'ACCESS_KEY_PREFIX=' >> $GITHUB_ENV
          fi

      - name: Set Secret names for Org Access
        run: |
          echo "ORG_AWS_ACCESS_KEY_ID_SECRET_NAME=${BRANCH_PREFIX//-/_}ORG_${ACCESS_KEY_PREFIX}AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "ORG_AWS_SECRET_ACCESS_KEY_SECRET_NAME=${BRANCH_PREFIX//-/_}ORG_${ACCESS_KEY_PREFIX}AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV

      - name: Test Secret names for Org Access
        run: |
          if [ -z "${{ secrets[env.ORG_AWS_ACCESS_KEY_ID_SECRET_NAME] }}" -o \
               -z "${{ secrets[env.ORG_AWS_SECRET_ACCESS_KEY_SECRET_NAME] }}" ] ; then
            echo 'Missing Secret names for Org Access!' ; exit 1
          fi

      - name: Get Secret Name for AWS Account ID
        run: |
          if [ -z "$BRANCH_PREFIX" ] ; then
            echo "ACCOUNT_ID_SECRET_NAME=${BRANCH_ENV^^}_AWS_ACCOUNT_ID" >> $GITHUB_ENV
          else
            echo "ACCOUNT_ID_SECRET_NAME=${BRANCH_PREFIX//-/_}AWS_ACCOUNT_ID" >> $GITHUB_ENV
          fi

      - name: Test Secret Name for AWS Account ID
        run: |
          if [ -z "${{ secrets[env.ACCOUNT_ID_SECRET_NAME] }}" ] ; then
            echo 'Missing secret names for AWS Account ID!' ; exit 1
          fi

      - name: Set Assume Role Name
        run: |
          if [ -z "$BRANCH_PREFIX" ] ; then
            echo 'ASSUME_ROLE_ACCOUNT_ID=${{ secrets.ASSUME_ROLE_AWS_ACCOUNT_ID }}' >> $GITHUB_ENV
          else
            echo 'ASSUME_ROLE_ACCOUNT_ID=${{ secrets[env.ACCOUNT_ID_SECRET_NAME] }}' >> $GITHUB_ENV
          fi
          if [[ "$REPO_SUFFIX" == "-security" ]] ; then
            if [[ $BRANCH_NAME =~ ^.+-iam$ ]] ; then
               echo 'ASSUME_ROLE_NAME=${{ secrets.ORG_IAM_DEPLOY_ROLE_NAME }}' >> $GITHUB_ENV
               echo 'IAM_INDICATOR=iam-' >> $GITHUB_ENV
            else
               echo 'ASSUME_ROLE_NAME=${{ secrets.ORG_SECURITY_DEPLOY_ROLE_NAME }}' >> $GITHUB_ENV
               echo 'IAM_INDICATOR=' >> $GITHUB_ENV
            fi
          else
            if [[ -z "$AWS_ASSUME_ROLE_NAME" ]] ; then
              echo "ASSUME_ROLE_NAME=${BRANCH_PREFIX,,}bardGithubDeploy-${REPO_COMPANY}-${REPO_APP}-${BRANCH_ENV}" >> $GITHUB_ENV
            else
              echo "ASSUME_ROLE_NAME=$AWS_ASSUME_ROLE_NAME" >> $GITHUB_ENV
            fi
            echo 'IAM_INDICATOR=' >> $GITHUB_ENV
          fi

      - name: Test Assume Role Name
        run: |
          if [ -z "ASSUME_ROLE_ACCOUNT_ID" -o \
               -z "$ASSUME_ROLE_NAME" ] ; then
            echo 'Missing secret names for AWS Account IDs!' ; exit 1
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets[env.ORG_AWS_ACCESS_KEY_ID_SECRET_NAME] }}
          aws-secret-access-key: ${{ secrets[env.ORG_AWS_SECRET_ACCESS_KEY_SECRET_NAME] }}
          aws-region: ${{ matrix.region }}
          role-to-assume: 'arn:aws:iam::${{ secrets[env.ACCOUNT_ID_SECRET_NAME] }}:role/${{ env.ASSUME_ROLE_NAME }}'
          role-duration-seconds: 1200

      - name: Set bucket prefix
        run: |
          if [[ "$BRANCH_PREFIX" == "" ]] ; then
            echo "BUCKET_PREFIX=bardavon" >> $GITHUB_ENV
          else
            echo "BUCKET_PREFIX=bard" >> $GITHUB_ENV
          fi

      - name: Test bucket prefix
        run: |
          if [ -z "$BUCKET_PREFIX" ] ; then
            echo 'Missing bucket prefix!' ; exit 1
          fi

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: wheel_file

      - name: Copy files to the assets bucket with the AWS CLI
        run: |
          s3_location="s3://${BRANCH_PREFIX}${BUCKET_PREFIX}-${BRANCH_ENV}-workflow-cdm-assets-${{ matrix.region }}"
          s3_location=${s3_location,,}
          aws s3 cp data_excavator-1.0-py3-none-any.whl $s3_location/wheel_file/
          aws s3 cp src/app/cdm/enterprise/execute.py $s3_location/cdm/enterprise/
          aws s3 cp src/app/cdm/employer/execute.py $s3_location/cdm/employer/
          aws s3 cp src/app/cdm/adjuster/execute.py $s3_location/cdm/adjuster/
          aws s3 cp src/app/cdm/case_manager/execute.py $s3_location/cdm/case_manager/
          aws s3 cp src/app/cdm/location/execute.py $s3_location/cdm/location/
          aws s3 cp src/app/cdm/patient/execute.py $s3_location/cdm/patient/
          aws s3 cp src/app/cdm/physician/execute.py $s3_location/cdm/physician/
          aws s3 cp src/app/cdm/provider/execute.py $s3_location/cdm/provider/
          aws s3 cp src/app/cdm/visit/execute.py $s3_location/cdm/visit/
          aws s3 cp src/app/cdm/case/execute.py $s3_location/cdm/case/
          aws s3 cp src/app/cdm/case_risk_assessment/execute.py $s3_location/cdm/case_risk_assessment/
          aws s3 cp src/app/cdm/payor_transaction/execute.py $s3_location/cdm/payor_transaction/
          aws s3 cp src/app/cdm/provider_transaction/execute.py $s3_location/cdm/provider_transaction/
          aws s3 cp src/app/cdm/note/execute.py $s3_location/cdm/note/
          aws s3 cp src/app/cdm/provider_remit/execute.py $s3_location/cdm/provider_remit/
